// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Bot.Builder
{
    /// <summary>
    /// Contains recognition results generated by an <see cref="IRecognizer"/>.
    /// </summary>
    /// <seealso cref="IRecognizer.RecognizeAsync(ITurnContext, System.Threading.CancellationToken)"/>
    public class RecognizerResult : IRecognizerConvert
    {
        /// <summary>
        /// Gets or sets the input text to recognize.
        /// </summary>
        /// <value>
        /// Original text to recognizer.
        /// </value>
        [JsonProperty("text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the input text as modified by the recognizer, for example for spelling correction.
        /// </summary>
        /// <value>
        /// Text modified by recognizer.
        /// </value>
        [JsonProperty("alteredText")]
        public string AlteredText { get; set; }

        /// <summary>
        /// Gets or sets the recognized intents, with the intent as key and the confidence as value.
        /// </summary>
        /// <value>
        /// Mapping from intent to information about the intent.
        /// </value>
        [JsonProperty("intents")]
        public IDictionary<string, IntentScore> Intents { get; set; } = new Dictionary<string, IntentScore>();

        /// <summary>
        /// Gets or sets the recognized top-level entities.
        /// </summary>
        /// <value>
        /// Object with each top-level recognized entity as a key.
        /// </value>
        [JsonProperty("entities")]
        public JObject Entities { get; set; } = new JObject();

        /// <summary>
        /// Gets or sets properties that are not otherwise defined by the <see cref="RecognizerResult"/> type but that
        /// might appear in the REST JSON object.
        /// </summary>
        /// <value>The extended properties for the object.</value>
        /// <remarks>With this, properties not represented in the defined type are not dropped when
        /// the JSON object is deserialized, but are instead stored in this property. Such properties
        /// will be written to a JSON object when the instance is serialized.</remarks>
        [JsonExtensionData(ReadData = true, WriteData = true)]
        public IDictionary<string, object> Properties { get; set; } = new Dictionary<string, object>();

        /// <inheritdoc />
        public void Convert(dynamic result)
        {
            Text = result.Text;
            AlteredText = result.AlteredText;
            Intents = result.Intents;
            Entities = result.Entities;
            Properties = result.Properties;
        }

        /// <summary>
        /// Returns the name of the top scoring intent from a set of LUIS results.
        /// </summary>
        /// <param name="results">Result set to be searched.</param>
        /// <param name="defaultIntent">(Optional) Intent name to return should a top intent be found. Defaults to a value of "None".</param>
        /// <param name="minScore">(Optional) Minimum score needed for an intent to be considered as a top intent. If all intents in the set are below this threshold then the `defaultIntent` will be returned.  Defaults to a value of `0.0`.</param>
        /// <returns>The top scoring intent name.</returns>
        public string TopIntent(string defaultIntent = "None", double minScore = 0.0)
        {
            string topIntent = null;
            var topScore = -1.0;
            if (this.Intents.Count > 0)
            {
                foreach (var intent in this.Intents)
                {
                    var score = (double)intent.Value.Score;
                    if (score > topScore && score >= minScore)
                    {
                        topIntent = intent.Key;
                        topScore = score;
                    }
                }
            }

            return !string.IsNullOrEmpty(topIntent) ? topIntent : defaultIntent;
        }
    }
}
